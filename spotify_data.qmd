---
execute:
  echo: false
  message: false
  warning: false
---

# Spotify Data

One of my favorite hobbies is listening to music. Not just through headphones or in the car, but listening to live music and experiencing all of the energy that comes with live performances. Some time ago I found out that R had a package, `spotifyr` @spotify_r, that was a wrapper for getting track audio features from Spotify's API. I started exploring the functionality of the package along with a few projects people had done (see )

https://d2l.ai/index.html

```{r preliminaries}
library(tidyverse)
library(GGally)
library(corrplot)
library(knitr)
library(viridis)
library(hrbrthemes)
library(lubridate)
songs <- read.csv('genre_songs_8.csv')
```

```{r}
#| eval: false
View(songs)

# remove duplicate tracks based on unique track.id
songs <- songs %>% 
  distinct(track.id, .keep_all = TRUE)

names(songs)
```
## Exploratory Data Analysis

```{r}
#| eval: false
summary(songs)
head(songs)
str(songs)
```

```{r}
# get a count of tracks in all genres
songs %>% 
  group_by(playlist_genre) %>% 
  summarise(Count = n()) %>% 
  kable(format = "html", caption = "Distribution of Song Counts by Genre",
        col.names = c("Genre", "Count"))
```

```{r}
#| eval: false
class(songs)
```


```{r}
# songs %>% 
#   ggplot(aes(x = danceability, color = playlist_genre)) +
#   geom_histogram(bins = 50) +
#   facet_wrap(~ playlist_genre)

songs %>% 
  ggplot(aes(x = danceability, fill = playlist_genre, color = playlist_genre)) +
  geom_histogram(alpha = 0.6) + 
  scale_fill_viridis(discrete = TRUE) +
  scale_color_viridis(discrete = TRUE) +
  # theme_ipsum() +
  # theme(
  #   legend.position = "none",
  #   panel.spacing = unit(0.1, "lines"),
  #   strip.text.x = element_text(size = 8)
  # )+
  facet_wrap(~ playlist_genre)
```

## Data Cleaning

```{r}
# change the three categorical variables into factors
songs$key <- as.factor(songs$key)
songs$mode <- as.factor(songs$mode)
#songs$playlist_subgenre <- as.factor(songs$playlist_subgenre)

#shorten name and turn to date object (lubridate)
songs <- songs %>% 
  mutate(release_date = as.Date(track.album.release_date))

songs <- songs %>% 
  rename(duration = duration_ms,
         genre = playlist_genre,
         subgenre = playlist_subgenre)

# rename some predictors
# create predictor subsets
cat_predictors <- c("genre", "key", "mode", "release_date")
cat_used <- select(songs, cat_predictors)


#separate out the 9 numerical variables
num_predictors <- c('danceability', 'energy','loudness','speechiness',
                    'acousticness', 'instrumentalness', 'valence','tempo','duration','liveness')
```


<!-- ```{r} -->
<!-- library(reticulate) -->
<!-- repl_python() -->
<!-- ``` -->


<!-- ```{python} -->
<!-- import pandas as pd -->

<!-- songs = pd.read_csv("H:\My Drive\Spotify_Project\genre_songs_8.csv", encoding = 'unicode_escape') -->
<!-- ``` -->

<!-- ```{python} -->
<!-- songs.cols() -->
<!-- ``` -->

